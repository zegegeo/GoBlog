// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: comment.proto

package commentclient

import (
	"context"

	"GoBlog/service/comment/comment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommentInfo            = comment.CommentInfo
	CreateCommentRequest   = comment.CreateCommentRequest
	CreateCommentResponse  = comment.CreateCommentResponse
	DeleteCommentRequest   = comment.DeleteCommentRequest
	DeleteCommentResponse  = comment.DeleteCommentResponse
	GetCommentListRequest  = comment.GetCommentListRequest
	GetCommentListResponse = comment.GetCommentListResponse

	Comment interface {
		// 创建评论
		CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
		// 获取文章评论列表
		GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...grpc.CallOption) (*GetCommentListResponse, error)
		// 删除评论
		DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	}

	defaultComment struct {
		cli zrpc.Client
	}
)

func NewComment(cli zrpc.Client) Comment {
	return &defaultComment{
		cli: cli,
	}
}

// 创建评论
func (m *defaultComment) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.CreateComment(ctx, in, opts...)
}

// 获取文章评论列表
func (m *defaultComment) GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...grpc.CallOption) (*GetCommentListResponse, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.GetCommentList(ctx, in, opts...)
}

// 删除评论
func (m *defaultComment) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}
